#pragma once
#include "CBaseCombatCharacter.h"
#define ButtonCode_t char

enum DotaUnitOrder_t : int {
	DOTA_UNIT_ORDER_NONE = 0,
	DOTA_UNIT_ORDER_MOVE_TO_POSITION = 1,
	DOTA_UNIT_ORDER_MOVE_TO_TARGET = 2,
	DOTA_UNIT_ORDER_ATTACK_MOVE = 3,
	DOTA_UNIT_ORDER_ATTACK_TARGET = 4,
	DOTA_UNIT_ORDER_CAST_POSITION = 5,
	DOTA_UNIT_ORDER_CAST_TARGET = 6,
	DOTA_UNIT_ORDER_CAST_TARGET_TREE = 7,
	DOTA_UNIT_ORDER_CAST_NO_TARGET = 8,
	DOTA_UNIT_ORDER_CAST_TOGGLE = 9,
	DOTA_UNIT_ORDER_HOLD_POSITION = 10,
	DOTA_UNIT_ORDER_TRAIN_ABILITY = 11,
	DOTA_UNIT_ORDER_DROP_ITEM = 12,
	DOTA_UNIT_ORDER_GIVE_ITEM = 13,
	DOTA_UNIT_ORDER_PICKUP_ITEM = 14,
	DOTA_UNIT_ORDER_PICKUP_RUNE = 15,
	DOTA_UNIT_ORDER_PURCHASE_ITEM = 16,
	DOTA_UNIT_ORDER_SELL_ITEM = 17,
	DOTA_UNIT_ORDER_DISASSEMBLE_ITEM = 18,
	DOTA_UNIT_ORDER_MOVE_ITEM = 19,
	DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO = 20,
	DOTA_UNIT_ORDER_STOP = 21,
	DOTA_UNIT_ORDER_TAUNT = 22,
	DOTA_UNIT_ORDER_BUYBACK = 23,
	DOTA_UNIT_ORDER_GLYPH = 24,
	DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH = 25,
	DOTA_UNIT_ORDER_CAST_RUNE = 26,
	DOTA_UNIT_ORDER_PING_ABILITY = 27,
	DOTA_UNIT_ORDER_MOVE_TO_DIRECTION = 28,
	DOTA_UNIT_ORDER_PATROL = 29,
	DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION = 30,
	DOTA_UNIT_ORDER_RADAR = 31,
	DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK = 32,
	DOTA_UNIT_ORDER_CONTINUE = 33,
	DOTA_UNIT_ORDER_VECTOR_TARGET_CANCELED = 34,
	DOTA_UNIT_ORDER_CAST_RIVER_PAINT = 35,
	DOTA_UNIT_ORDER_PREGAME_ADJUST_ITEM_ASSIGNMENT = 36,
};
enum PlayerOrderIssuer_t : int {
	DOTA_ORDER_ISSUER_SELECTED_UNITS = 0,
	DOTA_ORDER_ISSUER_CURRENT_UNIT_ONLY = 1,
	DOTA_ORDER_ISSUER_HERO_ONLY = 2,
	DOTA_ORDER_ISSUER_PASSED_UNIT_ONLY = 3
};
enum OrderQueueBehavior_t : int {
	DOTA_ORDER_QUEUE_DEFAULT = 0,
	DOTA_ORDER_QUEUE_NEVER = 1,
	DOTA_ORDER_QUEUE_ALWAYS = 2,
};

// find PrepareUnitOrders with "particles/ui_mouseactions/waypoint_flag.vpcf"
//class C_BasePlayer, C_BaseCombatCharacter, C_BaseFlex, C_BaseAnimatingOverlay, C_BaseAnimating, C_BaseModelEntity, C_BaseEntity, C_GameEntity, CEntityInstance, IHandleEntity, IPredictionCopyable, IParticlePropertyOuter, IBoneTransformOverride;
class CDotaPlayer : public CBaseCombatCharacter
{
public: //wtf were those LWSS
	virtual void OnBecomeLocalPlayer(); // 302, 
	virtual void CalcView(); // 303, 
	virtual void CalcViewModelView(); // 304, 
	virtual void CalcRoll(); // 305, 
	virtual void IsInThirdPersonView(); // 306, 
	virtual void SetPlayerUnderwater(); // 307, 
	virtual void PlayWadeSound(); // 308, #STR: "Player.Wade"
	virtual void ActivePlayerCombatCharacter(); // 309, 
	virtual void n_310(); // 310, 
	virtual void Weapon_ShootPosition(); // 311, 
	virtual void Weapon_ShootAngles(); // 312, 
	virtual void Weapon_CanUse(); // 313, 
	virtual void Weapon_DropPrimary(); // 314, 
	virtual void GetAutoaimVector(); // 315, 
	virtual void CreateMove(); // 316, 
	virtual void SendMove(); // 317, 
	virtual void AvoidPhysicsProps(); // 318, 
	virtual void PlayerUse(); // 319, 
	virtual void GetUseTarget(); // 320, 
	virtual void FindUseEntity(); // 321, #STR: "Trace using: %s\n", "Radial using: %s\n", "no usable entity found"
	virtual void IsUseableEntity(); // 322, 
	virtual void OverrideMouseInput(); // 323, 
	virtual void OverrideJoystickInput(); // 324, 
	virtual void n_325(); // 325, 
	virtual void GetObserverMode(); // 326, 
	virtual void GetObserverTarget(); // 327, 
	virtual void IsBot(); // 328, 
	virtual void TeamChange(int); // 329, 
	virtual void n_330(); // 330, 
	virtual void GetFlashlightTextureName(); // 331, 
	virtual void GetFlashlightFOV(); // 332, 
	virtual void GetFlashlightFarZ(); // 333, 
	virtual void GetFlashlightLinearAtten(); // 334, 
	virtual void CastsFlashlightShadows(); // 335, 
	virtual void GetFlashlightOffset(); // 336, 
	virtual void IsAllowedToSwitchWeapons(); // 337, 
	virtual void GetActiveWeaponForSelection(); // 338, 
	virtual void n_339(); // 339, 
	virtual void GetRenderedWeaponModel(); // 340, 
	virtual void IsOverridingViewmodel(); // 341, 
	virtual void DrawOverriddenViewmodel(); // 342, 
	virtual void GetDefaultAnimSpeed(); // 343, 
	virtual void ThirdPersonSwitch(); // 344, 
	virtual void n_345(); // 345, 
	virtual int GetPlayerID(); // 346, 
	virtual void CanSetSoundMixer(); // 347, 
	virtual void GetSoundscapeListener(); // 348, 
	virtual void WeaponHasInfiniteAmmo(); // 349, 
	virtual void PlayerSolidMask(); // 350, 
	virtual void PreThink(); // 351, 
	virtual void PostThink(); // 352, 
	virtual void ItemPreFrame(); // 353, 
	virtual void ItemPostFrame(); // 354, 
	virtual void AbortReload(); // 355, 
	virtual void SelectLastItem(); // 356, 
	virtual void Weapon_SetLast(); // 357, 
	virtual void Weapon_ShouldSetLast(); // 358, 
	virtual void Weapon_ShouldSelectItem(); // 359, 
	virtual void GetLastWeapon(); // 360, 
	virtual void SelectItem(); // 361, 
	virtual void SelectItem(const char*, int); // 362, 
	virtual void UpdateClientData(void*); // 363, 
	virtual void GetFOV(); // 364, 
	virtual void GetDefaultFOV(); // 365, 
	virtual void IsZoomed(); // 366, 
	virtual void GetNearZ(); // 367, 
	virtual void GetFarZ(); // 368, 
	virtual void ViewPunch(); // 369, 
	virtual void OverrideView(); // 370, 
	virtual void n_371(); // 371, 
	virtual const char* GetPlayerName(); // 372, #STR: "invalid index"
	virtual const char* GetCharacterDisplayName(); // 373, 
	virtual void GetPlayerMins(); // 374, 
	virtual void GetPlayerMaxs(); // 375, 
	virtual void GetPlayerColor(); // 376, 
	virtual void UpdateCollisionBounds(); // 377, 
	virtual void GetUseEntity(); // 378, 
	virtual void GetHeldEntity(); // 379, 
	virtual void GetPotentialUseEntity(); // 380, 
	virtual void SetVehicleRole(); // 381, #STR: "vehicleRole %i\n"
	virtual void SetAnimation(); // 382, 
	virtual void GetPunchAngle(); // 383, 
	virtual void GetMinFOV(); // 384, 
	virtual void PlayPlayerJingle(); // 385, 
	virtual void UpdateStepSound(); // 386, #STR: "ladder"
	virtual void PlayStepSound(); // 387, 
	virtual void GetFootstepSurface(); // 388, 
	virtual void GetStepSoundVelocities(); // 389, 
	virtual void SetStepSoundTime(); // 390, 
	virtual void ExitLadder(); // 391, 
	virtual void IsAbleToAutoCenterOnLadders(); // 392, 
	virtual void Hints(); // 393, 
	virtual void GetFogParams(); // 394, 
	virtual void OnAchievementAchieved(); // 395, 
	virtual void n_396(); // 396, 
	virtual void n_397(); // 397, 
	virtual void n_398(); // 398, 
	virtual void CalcPlayerView(); // 399, 
	virtual void CalcObserverView(); // 400, 
	virtual void GetChaseCamViewOffset(); // 401, 
	virtual void CalcChaseCamView(); // 402, 
	virtual void CalcInEyeCamView(); // 403, 
	virtual void CalcDeathCamView(); // 404, 
	virtual void CalcRoamingView(); // 405, 
	virtual void CalcFreezeCamView(); // 406, #STR: "freezecam_started"
	virtual void SetLocalViewAngles(); // 407, 
	virtual void SetViewAngles(); // 408, 
	virtual void IsDucked(); // 409, 
	virtual void IsDucking(); // 410, 
	virtual void GetFallVelocity(); // 411, 
	virtual void FindEntityClassForward(); // 412, 
	virtual void FindEntityForward(); // 413, 
	virtual void FindPickerEntityClass(); // 414, 
	virtual void FindPickerEntity(); // 415, 
	virtual void FindEntityInheritingFromForward(); // 416, 
	virtual void FindPickerEntityInheritingFrom(); // 417, 
	virtual void ProcessMouseclick(); // 418, 
	virtual void PrepareUnitOrders(); // 419, 
	virtual void GetValidCursor(); // 420, 
	virtual void ShouldRegenerateOriginFromCellBits(); // 421, 
};